
server {
  listen 80;

  location /app/ {
    rewrite ^/app/(.*)$ /$1 break;
    proxy_pass http://app:3002;
  }

  location ~ ^/app1/([0-9]+) {
    set $dashboard_id $1;

    add_header X-Debug-Dashboard-ID "$dashboard_id";
    add_header X-Debug-Cookie "$http_cookie";

    access_by_lua_block {
      local dashboard_id = ngx.var.dashboard_id
      local cookie = ngx.var.http_cookie or ""

      -- extract stitch_dashboard_ids cookie value
      local allowed_ids_str = cookie:match("stitch_dashboard_ids=([^;]*)") or ""

      -- normalize and split into ids
      local allowed = false
      for id in allowed_ids_str:gmatch("[^,]+") do
        id = id:gsub("^%s*(.-)%s*$", "%1")  -- trim spaces
        if id == dashboard_id then
          allowed = true
          break
        end
      end

      if not allowed then
        return ngx.redirect("http://localhost:8080/app/", 302)
      end
    }

    rewrite ^/app1/(.*)$ /$1 break;
    proxy_pass http://app1:3000;
  }


  # location ~ ^/app1/([0-9]+) {
  #   set $dashboard_id $1;

  #   # add debug headers (visible in browser devtools -> network -> headers)
  #   add_header X-Debug-Dashboard-ID "$dashboard_id";
  #   add_header X-Debug-Cookie "$http_cookie";

  #   # only allow if dashboard_id exists in cookie value (loose match)

  #   content_by_lua_block {
  #       local dashboard_id = ngx.re.match(ngx.var.uri, [[^/app1/(\d+)]])[1]
  #       local cookie = ngx.var.http_cookie or ""

  #       local allowed_ids = cookie:match("stitch_dashboard_ids=([^;]*)")
  #       local allowed = false

  #       if allowed_ids then
  #           for id in allowed_ids:gmatch("([^,]+)") do
  #               if id == dashboard_id then
  #                   allowed = true
  #                   break
  #               end
  #           end
  #       end

  #       if not allowed then
  #           return ngx.redirect("/app/", 302)
  #       end
  #   }
    

  #   rewrite ^/app1/(.*)$ /$1 break;
  #   proxy_pass http://app1:3000;
  # }

  # location /app1/ {target="_blank"
  #   rewrite ^/app1/(.*)$ /$1 break;
  #   proxy_pass http://app1:3000;
  # }

  location /app2/ {
    rewrite ^/app2/(.*)$ /$1 break;
    proxy_pass http://app2:3001;
  }
}